改进：
//定义部分
#define TrigPin 2 //定义触发超声波模块的引脚TrigPin
#define EchoPin 3 //定义接收返回信号电平值的引脚EchoPin
#define Buzzer 5 //定义驱动有源蜂鸣器的引脚Buzzer
#define Temperature A0  //定义接收温度的引脚Temperature
#define WarningDistance 35  //定义警告距离WarningDistance
float value_cm; //定义浮点型变量存储计算的距离值
float temp_Value; //摄氏温度
 

void setup() {
  Serial.begin(9600); //开启串行通信接口，并设置通信波特率为9600
//由于测温范围为0～100℃，输出电压为0～1V，采用内部1.1V参考电压
analogReference(INTERNAL);

  pinMode(TrigPin,OUTPUT); //设定TrigPin引脚为数字输出模式
  pinMode(EchoPin,INPUT); //设定EchoPin引脚为数字输入模式
  pinMode(Buzzer,OUTPUT); //设定Buzzer引脚为数字输出模式
  digitalWrite(Buzzer,LOW); //设定有源蜂鸣器初始状态是不响的状态

}

void loop() {
  
  int Digital_Value; //读取电压值  
  Digital_Value=analogRead(Temperature); //读取电压值（数字量） 
  temp_Value=(float)Digital_Value/1023*110.00;//换算成摄氏温度  
  //调用自定义函数distance()，测得障碍物距离超声波模块的距离
  distance();
  //调用自定义函数stu()，判断障碍物距离超声波模块的值是否小于设定值
  stu();
  delay(1000); //一秒刷新一次
}

//自定义函数distance()
void distance()
{
  //产生一个10微秒的高脉冲触发TrigPin引脚，发射超声波
  digitalWrite(TrigPin,LOW); //设定TrigPin引脚为低电平
  delayMicroseconds(2); //等待2微秒
  digitalWrite(TrigPin,HIGH); //设定TrigPin引脚为高电平
  delayMicroseconds(10); //等待10微秒
  digitalWrite(TrigPin,LOW); //设定TrigPin引脚为低电平  
  value_cm=float(pulseIn(EchoPin,HIGH)*331.45*sqrt(1+temp_Value/273.15)/2)/10000; //计算距离
  Serial.print(value_cm); //向串口输出距离值
  Serial.println("cm"); //向串口输出距离值的单位
  delay(100); //等待100毫秒
}
//自定义函数stu()
void stu()
{
  if (value_cm<= WarningDistance) //value_cm小于或等于e设定值警告距离WarningDistanc时
  {
    //给有源蜂鸣器的引脚高电平，有源蜂鸣器鸣叫
    digitalWrite(Buzzer,HIGH);
    delay(30); //鸣叫声延迟30毫秒
    //给有源蜂鸣器的引脚低电平，有源蜂鸣器停止鸣叫
    digitalWrite(Buzzer,LOW);
  }
  else //当value_cm大于设定的值35cm时
  {
    //给有源蜂鸣器的引脚低电平，有源蜂鸣器不发出鸣叫
    digitalWrite(Buzzer,LOW);
  }
}
